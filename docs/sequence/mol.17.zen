Manager
AirplaneSchemaInfoPage
AirplaneSchemaController
AirplaneSchemaEndpoint
AirplaneSchemaService
AirplaneSchemaFacade
Seat
AirplaneSchema

@Starter(Manager)

if (seatClassesExist && validData) {
  success = AirplaneSchemaInfoPage.enter() {
    seatClassDtos = SeatClassController.getAll() {
      seatClassDtos = SeatClassEndpoint.getAll() {
        //RO, Read Committed
        while (1) {
          seatClassDtos = SeatClassService.getAll() {
            seatClassDtos = SeatClassFacade.findAll()
          }
        }
      }
    }
  }
  
  airplaneSchemaDto = AirplaneSchemaController.create(airplaneSchemaDto) {
    airplaneSchemaDto = AirplaneSchemaEndpoint.create(airplaneSchemaDto) {
      //RW, Read Committed
      while (1) {
      airplaneSchema = AirplaneSchema."<<create>>";
        airplaneSchema = AirplaneSchemaService.create(airplaneSchema) {
          success = AirplaneSchemaFacade.create(airplaneSchema){
            Seat."<<cascade persist>>"
          }
        }
      }
    }
  }
} else if (noSeatClasses) {
  displayError = SeatClassController.getAll() {
    displayError = SeatClassEndpoint.getAll() {
      //RO, Read Committed
      while (1) {
        noSeatClassesError = SeatClassService.getAll() {
          noSeatClassesError = SeatClassFacade.findAll()
        }
      }
    }
  }
} else if (invalidData) {
  displayError = AirplaneSchemaInfoPage.enter(airplaneSchemaDto) {
    invalidDataError = AirplaneSchemaController.create(airplaneSchemaDto)
  }
}