Client
BuyTicketPage
TicketController
TicketEndpoint
TicketController
TicketEndpoint
TicketService
TicketFacade
ConnectionFacade
Ticket
@Starter(Client)

if(validData) {
  displaySuccess = BuyTicketPage.buyTicket(ticketDto) {
    successResponse = TicketController.buyTicket(ticketDto) {

      success = TicketEndpoint.buyTicket(ticketDto){
                      //RW, Read Committed
      while(1) {
        destinationFlight = FlightService.findByCode(code) {
          destinationFlight = FlightFacade.find(code)
        }
        success = TicketEndpoint.buySingleTicket(destinationFlight, flightDto, passengers) {
          account = AccountService.getCurrentUser() {
            account = AccountFacade.findByLogin(login)
          }
          ticket = Ticket."<<create>>";
          success = TicketService.buyTicket(ticket) {
            success = ConnectionFacade.edit(connection)
            success = TicketFacade.create(ticket)
          }
        }
      }
        }
    }
  }
}
else if(seatTaken) {
  displayError = BuyTicketPage.buyTicket(ticketDto) {
    errorResponse = TicketController.buyTicket(ticketDto) {

      error = TicketEndpoint.buyTicket(ticketDto){
                      //RW, Read Committed
      while(1) {
        destinationFlight = FlightService.findByCode(code) {
          destinationFlight = FlightFacade.find(code)
        }
        error = TicketEndpoint.buySingleTicket(destinationFlight, flightDto, passengers) {
          account = AccountService.getCurrentUser() {
            account = AccountFacade.findByLogin(login)
          }
          ticket = Ticket."<<create>>";
          error = TicketService.buyTicket(ticket) {
            success = ConnectionFacade.edit(connection)
            error = TicketFacade.create(ticket)
          }
        }
      }
        }
    }
  }
}
else if(departureTimeChanged) {
  displayError = BuyTicketPage.buyTicket(ticketDto) {
    errorResponse = TicketController.buyTicket(ticketDto) {

      error = TicketEndpoint.buyTicket(ticketDto){
                      //RW, Read Committed
      while(1) {
        destinationFlight = FlightService.findByCode(code) {
          destinationFlight = FlightFacade.find(code)
        }
        error = TicketEndpoint.buySingleTicket(destinationFlight, flightDto, passengers) {
          account = AccountService.getCurrentUser() {
            account = AccountFacade.findByLogin(login)
          }
        }
      }
        }
    }
  }
}else if(alreadyDeparted) {
  displayError = BuyTicketPage.buyTicket(ticketDto) {
    errorResponse = TicketController.buyTicket(ticketDto) {

      error = TicketEndpoint.buyTicket(ticketDto){
                      //RW, Read Committed
      while(1) {
        destinationFlight = FlightService.findByCode(code) {
          destinationFlight = FlightFacade.find(code)
        }
        error = TicketEndpoint.buySingleTicket(destinationFlight, flightDto, passengers) {
          account = AccountService.getCurrentUser() {
            account = AccountFacade.findByLogin(login)
          }
        }
      }
        }
    }
  }
}else if(cancelled) {
  displayError = BuyTicketPage.buyTicket(ticketDto) {
    errorResponse = TicketController.buyTicket(ticketDto) {

      error = TicketEndpoint.buyTicket(ticketDto){
                      //RW, Read Committed
      while(1) {
        destinationFlight = FlightService.findByCode(code) {
          destinationFlight = FlightFacade.find(code)
        }
        error = TicketEndpoint.buySingleTicket(destinationFlight, flightDto, passengers) {
          account = AccountService.getCurrentUser() {
            account = AccountFacade.findByLogin(login)
          }
        }
      }
        }
    }
  }
}else if(priceChanged) {
  displayError = BuyTicketPage.buyTicket(ticketDto) {
    errorResponse = TicketController.buyTicket(ticketDto) {

      error = TicketEndpoint.buyTicket(ticketDto){
                      //RW, Read Committed
      while(1) {
        destinationFlight = FlightService.findByCode(code) {
          destinationFlight = FlightFacade.find(code)
        }
        error = TicketEndpoint.buySingleTicket(destinationFlight, flightDto, passengers) {
          account = AccountService.getCurrentUser() {
            account = AccountFacade.findByLogin(login)
          }
        }
      }
        }
    }
  }
}
