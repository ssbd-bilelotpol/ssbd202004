Client
BuyTicketPage
TicketController
TicketEndpoint
AirplaneSchemaService
AirplaneSchemaFacade
TicketController
TicketEndpoint
TicketService
TicketFacade
Passenger
Ticket
ConnectionService
ConnectionFacade
Connection
@Starter(Client)
buyTicketForm = BuyTicketPage.buyTicket(flight) {

      airplaneSchemaAndSeats = TicketController.getAirplaneSchemaAndSeats(schemaId, flightId){


              airplaneSchemaAndSeats = TicketEndpoint.getAirplaneSchemaAndSeats(schemaId, flightId) {
                                                  //RO, Read Committed
  while(1) {

      airplaneSchema = AirplaneSchemaService.find(schemaId) {
        airplaneSchema = AirplaneSchemaFacade.find(schemaId)
      }

      takenSeats = TicketService.getTakenSeats(flightId){
        takenSeats = TicketFacade.getTakenSeats(flightId)
      }

  }
              }
      }
}
if(validData) {
  displaySuccess = BuyTicketPage.buyTicket(ticketDto) {
    successResponse = TicketController.buyTicket(ticketDto) {

        success = TicketEndpoint.buyTicket(ticketDto){
                      //RW, Read Committed
      while(1) {
        success = TicketService.buyTicket(ticketDto) {
          new Ticket
          Ticket.setData(ticketDto)
          success = TicketFacade.add(ticket){
            Passenger."<<cascade persist>>"
          }
          success = ConnectionService.calculateAggregate() {
            connection = ConnectionFacade.find(connectionId)
            tickets = TicketFacade.find(connectionId)
            calculate()
            Connection.setProfit(profit)
            success = ConnectionFacade.edit(connection)
          }
        }
      }
        }
    }
  }
}
else if(seatAlreadyTaken) {
  displayError = BuyTicketPage.buyTicket(ticketDto) {
    errorSeatAlreadyTaken = TicketController.buyTicket(ticketDto) {
        error = TicketEndpoint.buyTicket(ticketDto){
                //RW, Read Committed
      while(1) {
        error = TicketService.buyTicket(ticketDto) {
          new Ticket
          Ticket.setData(ticketDto)
          error = TicketFacade.add(ticket){
            Passenger."<<cascade persist>>"
          }
        }
      }
      }
        }
    }
  }
else if(invalidData) {
  displayError = BuyTicketPage.buyTicket(ticketDto) {
    error = TicketController.buyTicket(ticketDto)
  }
}

