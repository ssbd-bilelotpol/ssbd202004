Guest
RegisterPage
ConfirmPage
AccountController
AccountEndpoint
AccountService
AccountFacade
VerificationTokenService
VerificationTokenFacade
Account
ClientAccessLevel
AccountDetails
VerificationToken
@Starter(Guest)
if (validAccountData) {
  displaySuccess = RegisterPage.register(accountRegisterDto) {
    successResponse = AccountController.register(accountRegisterDto) {
      successResponse = AccountEndpoint.register(accountRegisterDto) {
        // RW, Read Committed
        while(1) {
          new Account()
          new AccountDetails()
          success = AccountService.register(account, accountDetails) {
            new ClientAccessLevel()
            new VerificationToken()
            success = AccountFacade.create(account)
            EmailService.sendRegisterToken(account)
          }
        }

      }

    }
  }
} else if (loginExists) {
  displayError = RegisterPage.register(accountRegisterDto) {
    errorAccountExists = AccountController.register(accountRegisterDto) {
      error = AccountEndpoint.register(accountRegisterDto) {
        // RW, Read Committed
        while(1) {
          error = AccountService.register(account, accountDetails) {
            accountExists = AccountFacade.create(account)
          }
        }
      }

    }
  }
} else if (invalidData) {
  displayError = RegisterPage.register(accountRegisterDto) {
    errorInvalidData = AccountController.register(accountRegisterDto)
  }
}
if (validConfirmToken) {
  displaySuccess = ConfirmPage.confirm(tokenId) {
    successResponse = AccountController.confirm(tokenId) {
      successResponse = AccountEndpoint.confirm(tokenId) {
        // RW, Read Committed
        while(1) {
          success = AccountService.confirm(accountId) {
            token = VerificationTokenService.confirmRegistration(tokenId){
              token = VerificationTokenFacade.find(id)
              success = VerificationTokenFacade.remove(id){
                VerificationToken."<<delete>>"
              }
            }
          }
          success = AccountFacade.edit(entity) {
            Account.setConfirm(true)
          }
        }
      }
    }
  }
} else if(invalidToken) {
  displayError = ConfirmPage.confirm(tokenId) {
    invalidToken = AccountController.confirm(tokenId) {
      invalidToken = AccountEndpoint.confirm(tokenId) {
        // RW, Read Committed
        while(1) {
          error = AccountService.confirm(tokenId) {
            error = VerificationTokenService.confirmRegistration(tokenId){
              error = VerificationTokenFacade.find(id)
              }
            }
          }
        }
      }
    }
  }
