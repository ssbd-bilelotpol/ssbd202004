Guest
LoginPage
ResetPage
AccountController
AccountEndpoint
AccountService
AccountFacade
Account
@Starter(Guest)

if(emailExists) {
  displaySuccess = LoginPage.sendResetPasswordToken(email) {
    response = AccountController.sendResetPasswordToken(email) {
      response = AccountEndpoint.sendResetPasswordToken(email){
        // RW, Read Committed
        while(1) {
          account = AccountService.findByEmail(email) {
            account = AccountFacade.findByEmail(email)
          }
          success = VerificationTokenService.sendResetPasswordToken(account){
            new VerificationToken()
            success = VerificationTokenFacade.create(verificationToken)
            success = EmailService.sendEmail(email, senderName, subject, message)
          }
        }
      }
    }
  }


} else {
  displaySuccess = LoginPage.sendResetPasswordToken(email) {
    response = AccountController.sendResetPasswordToken(email) {
     response = AccountEndpoint.sendResetPasswordToken(email) {
        // RW, Read Committed
        while(1) {
          notFound = AccountService.findByEmail(email) {
            notFound = AccountFacade.findByEmail(email)
          }
        }
      }
    }

  }
}
if (validData) {
  displaySuccess = ResetPage.resetPassword() {
    response = AccountController.resetPassword(passwordResetDto){
      success = AccountEndpoint.resetPassword(passwordResetDto){
        // RW, Read Committed
        while(1) {
          success = AccountService.resetPassword(passwordResetDto){
            account = VerificationTokenService.confirmPasswordReset(tokenId){
              verificationToken = VerificationTokenFacade.find(id)
              VerificationToken."<<delete>>"
              success = VerificationTokenFacade.remove(verificationToken)
            }

              success = AccountFacade.edit(account)

          }
        }
      }
    }

  }
} else if (invalidToken) {
  displayError = ResetPage.resetPassword() {
    error = AccountController.resetPassword(passwordResetDto){
      error = AccountEndpoint.resetPassword(passwordResetDto){
        // RW, Read Committed
        while(1) {
          error = AccountService.resetPassword(passwordResetDto){
            notFound = VerificationTokenService.confirmPasswordReset(tokenId){
              notFound = VerificationTokenFacade.find(id)

            }

          }
        }
      }
    }
  }
}
