Manager
AirplaneSchemaInfoPage
AirplaneSchemaController
AirplaneSchemaEndpoint
AirplaneSchemaService
AirplaneSchemaFacade

AirplaneSchema

@Starter(Manager) 

displayAirplaneSchema = AirplaneSchemaInfoPage.getAirplaneSchema() {
  airplaneSchemaDto = AirplaneSchemaController.findById(id) {
    airplaneSchemaDto = AirplaneSchemaEndpoint.findById(id) {
      //RO, Read Committed
      while (1) {
        airplaneSchema = AirplaneSchemaService.findById(id) {
          airplaneSchema = AirplaneSchemaFacade.findById(id)
        }
      }
    }
  }
}

if (removeSuccessful) {
  displayMessage = AirplaneSchemaInfoPage.delete(id) {
    success = AirplaneSchemaController.delete(id) {
      success = AirplaneSchemaEndpoint.remove(id) {
        //RW, Read Committed
        while (1) {
          airplaneSchema = AirplaneSchemaService.findById(id) {
            airplaneSchema = AirplaneSchemaFacade.findById(id)
          }
          new AirplaneSchema(delete);
          success = AirplaneSchemaService.delete(airplaneSchema) {
            success = AirplaneSchemaFacade.remove(entity)
          }
        }
      }
    }
  }
} else if (airplaneSchemaDeleted) {
  displayMessage = AirplaneSchemaInfoPage.delete(id) {
    airplaneSchemaDeletedError = AirplaneSchemaController.delete(id) {
      airplaneSchemaDeletedError = AirplaneSchemaEndpoint.delete(id) {
        //RO, Read Committed
        while (1) {
          airplaneSchemaNotFound = AirplaneSchemaService.findById(id) {
            airplaneSchemaNotFound = AirplaneSchemaFacade.findById(id)
          }
        }
      }
    }
  }
} else if (flightsUse) {
  displayMessage = AirplaneSchemaInfoPage.delete(id) {
    airplaneSchemaInUseError = AirplaneSchemaController.delete(id) {
      airplaneSchemaInUseError = AirplaneSchemaEndpoint.delete(id) {
        //RW, Read Committed
        while (1) {
          airplaneSchemaNotFound = AirplaneSchemaService.findById(id) {
            airplaneSchemaNotFound = AirplaneSchemaFacade.findById(id)
          }
          airplaneSchemaInUseError = AirplaneSchemaService.delete(airplaneSchema) {
            airplaneSchemaInUseError = AirplaneSchemaFacade.remove(entity)
          }
        }
      }
    }
  }
}