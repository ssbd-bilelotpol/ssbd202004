LoggedIn
EditAccountPage
AccountController
AccountEndpoint
AccountService
AccountFacade
AccountDetails
AccountAccessLevel
@Starter(LoggedIn)

displayAccountData = EditAccountPage.retrieveOtherAccountDetails(login) {
  accountDto = AccountController.retrieveOtherAccountDetails(login) {
    accountDto = AccountEndpoint.retrieveOtherAccountDetails(login) {
    // RO, Read Committed
      while(1) {
        account = AccountService.findByLogin(login) {
          account = AccountFacade.findByLogin(login)
        }
      }
    }
  }

}

if (validData) {
  displaySuccessMessage = EditAccountPage.edit(accountDto) {
    successResponse = AccountController.editOtherAccountDetails(login, accountEditDto) {
      successResponse = AccountEndpoint.editOtherAccountDetails(login, accountEditDto) {
        // RW, Read Committed
        while (1) {
          account = AccountService.findByLogin(login){
            account = AccountFacade.findByLogin(login)
          }
        
          success = AccountService.editAccountDetails(account, newDetails) {
            Account.setData(newDetails)
            success = AccountFacade.edit(entity) {
              AccountDetails."<<cascade merge>>"
              AccountAccessLevel."<<cascade merge>>"
            }
          }
        }
      }
    }

  }
} 
else if(emailExists) {
  displayError = EditAccountPage.editOtherAccountDetails(login, accountEditDto) {
    errorResponse =  AccountController.editOtherAccountDetails(login, accountEditDto) {
        errorResponse =  AccountEndpoint.editOtherAccountDetails(login, accountEditDto) {
        // RW, Read Committed
        while(1) {
          account = AccountService.findByLogin(login){
            account = AccountFacade.findByLogin(login)
          }

        error = AccountService.editAccountDetails(account, newDetails) {
          Account.setData(newDetails)
            errorEmailExists = AccountFacade.edit(entity)
          }
        }
      }
    }

  }
} 
else if(accountNotFound)
  displayErrorMessage = EditAccountPage.edit(accountDto) {
    errorResponse = AccountController.editOtherAccountDetails(accountEditDto) {
      errorResponse = AccountEndpoint.editOtherAccountDetails(accountEditDto) {
        // RW, Read Committed
        while (1) {
          notFound = AccountService.findByLogin(login){
            error = AccountFacade.findByLogin(login)
          }
        }
      }
    }

  }

} else if(invalidAccountData) {
  displayErrorMessage = EditAccountPage.edit(accountDto) {
    errorResponse = AccountController.editOtherAccountDetails(accountEditDto)
  } 
}