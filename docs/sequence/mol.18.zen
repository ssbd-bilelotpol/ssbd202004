Manager
AirplaneSchemaInfoPage
AirplaneSchemaController
AirplaneSchemaEndpoint
AirplaneSchemaService
AirplaneSchemaFacade
Seat


@Starter(Manager)

displayAirplaneSchema = AirplaneSchemaInfoPage.getAirplaneSchema() {
  airplaneSchemaDto = AirplaneSchemaController.findById(id) {
    airplaneSchemaDto = AirplaneSchemaEndpoint.findById(id) {
      //RO, Read Committed
      while (1) {
        airplaneSchema = AirplaneSchemaService.findById(id) {
          airplaneSchema = AirplaneSchemaFacade.findById(id)
        }
      }
    }
  }
}


if (seatsSelected && seatClassesSelected && validData) {
  displayMessage = AirplaneSchemaInfoPage.enter() {
    seatClassDtos = SeatClassController.getAll() {
      seatClassDtos = SeatClassEndpoint.getAll() {
        //RO, Read Committed 
        while (1) {
          seatClasses = SeatClassService.getAll() {
            seatClasses = SeatClassFacade.findAll()
          }
        }
      }
    }
    
    success = AirplaneSchemaController.update(airplaneSchemaDto) {
      success = AirplaneSchemaEndpoint.update(airplaneSchemaDto) {
        //RW, Read Committed
        while (1) {
        airplaneSchema = AirplaneSchemaService.findById(id) {
          airplaneSchema = AirplaneSchemaFacade.findById(id)
        }
          success = AirplaneSchemaService.update(airplaneSchema) {
            success = AirplaneSchemaFacade.edit(entity){
              Seat."<<cascade merge>>"
            }
          }
        }
      }
    }
  }
} else if (invalidData) {
  displayError = AirplaneSchemaInfoPage.enter(airplaneSchemaDto) {
    invalidDataError = AirplaneSchemaController.update(airplaneSchemaDto)
  }
}